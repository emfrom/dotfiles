#+TITLE: Readme for dotfiles config
#+AUTOR: E.M. From

These are my attempts at getting my configs organised. I'm using emacs orgmode throughout.

Big thanks:
- David Wilson/Systemcrafters
  His [[https://www.youtube.com/watch?v=74zOY-vgkyw&list=PLEoMzSkcN8oPH1au7H6B7bBJ4ZO7BXjSZ][emacs from scratch]] series got me back into using Emacs.
  
org mode is markdown on steroids (Schwarzenegger amounts of steroids)

"Tangle" is emacs org-mode lingo for exporting source code from org files, be it emacs lisp, shell script or whatnot. The .org files that make up this dotfiles repo tangle to the config files that are used. 

* Emacs

Everthing of import if in the file [[file:emacs/Emacs.org][Emacs.org]] that generates, i.e. tangles to, [[file:emacs/init.el][init.el]], [[file:emacs/early-init.el][early-init.el]] and [[file:emacs/desktop.el][desktop.el]]

* Bash

The whole config is in [[file:bash/Bash.org][Bash.org]] it tangles to the bashrc bash-profile etc. Short stub scripts are used in the home directory so it's easier to see when/how they've been modified.


* Tangle Script

This section creates the bash script, =tangle-all.sh=, that uses emacs to create all the actual dotfiles

#+begin_src shell :tangle ./tangle-all.sh :mkdirp yes
  #!/usr/bin/env bash

  #####
  #
  # Auto-tangle script for org files
  #
  # Use for convenience or as a git hook
  #


  # Check for emacs
  if ! command -v emacs &> /dev/null ; then
      echo "Emacs needed for this script to run"
      exit 0
  fi


  # Check for git
  if ! command -v git &> /dev/null ; then
      echo "git needed for this script to run"
      exit 0
  fi


  # Check if in a Git repository
  if ! git rev-parse --is-inside-work-tree &> /dev/null ; then
      echo "Not in a git repository"
      exit 0
  fi

  
  # Find all org files in the repo
  org_files=$(git ls-files '*.org')


  # Check if any org files were found
  if [ -z "$org_files" ]; then
      echo "No .org files found in the repo"
      exit 0
  fi


  # Construct a lisp snippet for emacs to run
  elisp_code="(progn (require 'org) "
  for file in $org_files; do
      elisp_code="$elisp_code (org-babel-tangle-file \"$file\")"
  done
  elisp_code="$elisp_code)"


  # Run the code snippet in emacs
  # Note: Doing this without user init files as that seems to screw up the process
  if ! emacs --batch --eval "$elisp_code" 2>&1 | grep "Tangled" ; then
      echo -e "\nSomething went wrong"
      echo "In all probability org-mode is not installed properly in emacs"
  else
      echo -e "\nAll done"
  fi

#+end_src


